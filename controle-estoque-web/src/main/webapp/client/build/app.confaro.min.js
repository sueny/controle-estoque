!function(){"use strict";angular.module("app",["ui.router","toastService","ngMaterial"]).config(["$httpProvider",function(a){}])}(),function(){"use strict";function a(a){function e(e){this.message=e,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"/ProjetoDeEngSoftw/client/views/forms/toast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}function t(e){this.message=e,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"bottom left",hideDelay:1e3})}var r={message:"",newmessage:e,errorMessageBottom:t};return r}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(a,e){var t=this;t.message=e.message,t.closeToast=function(){a.hide()}}]).factory("toastApp",a),a.$inject=["$mdToast"]}(),function(){"use strict";function a(a,e){a.state("cadastroMateriaPrima",{url:"/",templateUrl:"controle-estoque-web/src/main/webapp/client/views/forms/cad_materiaprima.html",controller:"cadastroMateriaPrimaController as vm"}),e.otherwise("/")}angular.module("app").config(a),a.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function a(a,e,t){function r(){l.listaUnidades=["Kg","m"]}function i(a){l.materiaprima=a,l.isBtnRemoveMateriaPrima=!0}function o(){e.listarTodas().success(function(e){e.success?l.listaMateriaPrima=e.listaMateriaPrima:a.newmessage("Problema ao Acessar a o servidor")})}function s(r,i){var o=t.confirm().parent(angular.element(document.body)).title("Excluir Matéria prima com Sku"+i.sku).content("Materia Prima: "+i.nome).ariaLabel("Excluir Materia Prima").ok("Sim").cancel("Não").targetEvent(r);t.show(o).then(function(){e.excluir(i).success(function(e){if(e.success){for(var t=0;t<l.listaMateriaPrima.length;t++)l.listaMateriaPrima[t].id===i.id,l.listaMateriaPrima.splice(t,1);a.newmessage("Removido com sucesso!.")}else a.newmessage("Problema ao Acessar o servidor")});for(var t=0;t<l.listaMateriaPrima.length;t++)if(console.log(l.listaMateriaPrima[t].id+" === "+i.id),l.listaMateriaPrima[t].id===i.id){l.listaMateriaPrima.splice(t,1);break}l.isBtnRemoveMateriaPrima=!1,a.newmessage("Removido a Materia Prima com o SKU."+i.sku),l.materiaprima={id:null,nome:"",sku:"",unidade:"",observacao:""}})}function n(t){e.cadastrar(t).success(function(e){e.success?(l.listaMateriaPrima.push(e.materialPrima),a.newmessage("Cadastro realizado com sucesso!")):a.newmessage("Problema ao Acessar a o servidor")})}function c(a){l.reverse=l.campoOrdencao===a?!l.reverse:!1,l.campoOrdencao=a}var l=this;l.initcadastroMateriaPrima=o,l.cadastrarMateriaPrima=n,l.buscaUnidadesMateriaPrima=r,l.excluirMateriaPrima=s,l.listaUnidades,l.isBtnRemoveMateriaPrima=!1,l.materiaprima={},l.listaMateriaPrima=[],l.selecionarMateriaPrima=i,l.campoOrdencao="nome",l.reverse=!0,l.ordenaMateriaPrima=c}angular.module("app").controller("cadastroMateriaPrimaController",a),a.$inject=["toastApp","materiaPrimaService","$mdDialog"]}(),function(){"use strict";function a(a){function e(e){return a.post(i,e)}function t(e){return a.post(o,e)}function r(){return a.get(s)}var i="api/material/cadastrar/",o="api/material/excluir/",s="/api/material/listar/",n={cadastrar:e,excluir:t,listarTodas:r};return n}angular.module("app").factory("materiaPrimaService",a),a.$inject=["$http","$location"]}(),function(){"use strict";function a(a){a.theme("default").primaryPalette("purple",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("purple",{"default":"200"})}angular.module("app").config(a),a.$inject=["$mdThemingProvider","$locationProvider"]}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbmZhcm8uYXBwLmpzIiwidG9hc3Quc2VydmljZS5qcyIsInJvdXRlci5hcHAuanMiLCJhcHAuY29uZmFyby5taW4uanMiLCJjYWRhc3Ryby9jYWRhc3Ryb01hdGVyaWFQcmltYUNvbnRyb2xsZXIuanMiLCJzZXJ2aWNlL3NlcnZpY2VNYXRlcmlhUHJpbWEuanMiLCJhcHAtY29uZmlnLmpzIl0sIm5hbWVzIjpbImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkaHR0cFByb3ZpZGVyIiwidG9hc3RBcHAiLCIkbWRUb2FzdCIsIm5ld21lc3NhZ2UiLCJlcnJvck1lc3NhZ2UiLCJ0aGlzIiwibWVzc2FnZSIsInNob3ciLCJjb250cm9sbGVyIiwiY29udHJvbGxlckFzIiwidGVtcGxhdGVVcmwiLCJhY3Rpb24iLCJoaWdobGlnaHRBY3Rpb24iLCJwb3NpdGlvbiIsImhpZGVEZWxheSIsImVycm9yTWVzc2FnZUJvdHRvbSIsInNlcnZpY2UiLCJzZWxmIiwiY2xvc2VUb2FzdCIsImhpZGUiLCJmYWN0b3J5IiwiJGluamVjdCIsInJvdXRlcyIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwic3RhdGUiLCJ1cmwiLCJvdGhlcndpc2UiLCJjYWRhc3Ryb01hdGVyaWFQcmltYUNvbnRyb2xsZXIiLCJtYXRlcmlhUHJpbWFTZXJ2aWNlIiwiJG1kRGlhbG9nIiwiYnVzY2FVbmlkYWRlc01hdGVyaWFQcmltYSIsImxpc3RhVW5pZGFkZXMiLCJzZWxlY2lvbmFyTWF0ZXJpYVByaW1hIiwibWF0ZXJpYVByaW1hIiwibWF0ZXJpYXByaW1hIiwiaXNCdG5SZW1vdmVNYXRlcmlhUHJpbWEiLCJpbml0Y2FkYXN0cm9NYXRlcmlhUHJpbWEiLCJsaXN0YXJUb2RhcyIsInN1Y2Nlc3MiLCJkYXRhIiwibGlzdGFNYXRlcmlhUHJpbWEiLCJleGNsdWlyTWF0ZXJpYVByaW1hIiwiZXYiLCJjb25maXJtIiwicGFyZW50IiwiZWxlbWVudCIsImRvY3VtZW50IiwiYm9keSIsInRpdGxlIiwic2t1IiwiY29udGVudCIsIm5vbWUiLCJhcmlhTGFiZWwiLCJvayIsImNhbmNlbCIsInRhcmdldEV2ZW50IiwidGhlbiIsImV4Y2x1aXIiLCJpIiwibGVuZ3RoIiwiaWQiLCJzcGxpY2UiLCJjb25zb2xlIiwibG9nIiwidW5pZGFkZSIsIm9ic2VydmFjYW8iLCJjYWRhc3RyYXJNYXRlcmlhUHJpbWEiLCJjYWRhc3RyYXIiLCJwdXNoIiwibWF0ZXJpYWxQcmltYSIsIm9yZGVuYU1hdGVyaWFQcmltYSIsImNhbXBvT3JkZW5jYW8iLCJyZXZlcnNlIiwiJGh0dHAiLCJwb3N0IiwiQVBJX1JPVVRFX0NBREFTVFJBUk1BVEVSSUFMUFJJTUEiLCJBUElfUk9VVEVfRVhDTFVJUk1BVEVSSUFQUklNQSIsImdldCIsIkFQSV9ST1VURV9MSVNUQVJNQVRFUklBUFJJTUEiLCJhcHBDb25maWciLCIkbWRUaGVtaW5nUHJvdmlkZXIiLCJ0aGVtZSIsInByaW1hcnlQYWxldHRlIiwiZGVmYXVsdCIsImh1ZS0xIiwiaHVlLTIiLCJodWUtMyIsImFjY2VudFBhbGV0dGUiXSwibWFwcGluZ3MiOiJDQUlBLFdBQ0EsWUFDQUEsU0FDQUMsT0FBQSxPQUFBLFlBQUEsZUFBQSxlQUNBQyxRQUFBLGdCQUFBLFNBQUFDLFVDTEEsV0FFQSxZQWNBLFNBQUFDLEdBQUFDLEdBaUJBLFFBQUFDLEdBQUFDLEdBQ0FDLEtBQUFDLFFBQUFGLEVBQ0FGLEVBQUFLLE1BRUFDLFdBQUEsa0JBQ0FDLGFBQUEsS0FDQUMsWUFBQSxtREFDQUMsT0FBQSxLQUNBQyxpQkFBQSxFQUNBQyxTQUFBLFlBQ0FDLFVBQUEsTUFLQSxRQUFBQyxHQUFBWCxHQUNBQyxLQUFBQyxRQUFBRixFQUNBRixFQUFBSyxNQUVBQyxXQUFBLGtCQUNBQyxhQUFBLEtBQ0FDLFlBQUEsNEJBQ0FDLE9BQUEsS0FDQUMsaUJBQUEsRUFDQUMsU0FBQSxjQUNBQyxVQUFBLE1BekNBLEdBQUFFLElBQ0FWLFFBQUEsR0FDQUgsV0FBQUEsRUFDQVksbUJBQUFB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QUFzRCxtQkFBQUEsRUFqQkExRSxRQUFBQyxPQUFBLE9BQ0FVLFdBQUEsaUNBQUFvQixHRGdPSUEsRUFBK0JQLFNBQVcsV0FBWSxzQkFBdUIsZ0JFcE9qRixXQUVBLFlBUUEsU0FBQVEsR0FBQTZDLEdBZUEsUUFBQU4sR0FBQTVCLEdBQ0EsTUFBQWtDLEdBQUFDLEtBQUFDLEVBQUFwQyxHQUdBLFFBQUFrQixHQUFBbEIsR0FDQSxNQUFBa0MsR0FBQUMsS0FBQUUsRUFBQXJDLEdBR0EsUUFBQUYsS0FDQSxNQUFBb0MsR0FBQUksSUFBQUMsR0F0QkEsR0FBQUgsR0FBQSwwQkFDQUMsRUFBQSx3QkFDQUUsRUFBQSx3QkFHQS9ELEdBQ0FvRCxVQUFBQSxFQUNBVixRQUFBQSxFQUNBcEIsWUFBQUEsRUFHQSxPQUFBdEIsR0FuQkFuQixRQUNBQyxPQUFBLE9BQ0FzQixRQUFBLHNCQUFBUyxHQUVBQSxFQUFBUixTQUFBLFFBQUEsZ0JDVkEsV0FFQSxZQVFBLFNBQUEyRCxHQUFBQyxHQUNBQSxFQUFBQyxNQUFBLFdBQ0FDLGVBQUEsVUFDQUMsVUFBQSxNQUNBQyxRQUFBLE1BQ0FDLFFBQUEsTUFDQUMsUUFBQSxTQUlBQyxjQUFBLFVBQ0FKLFVBQUEsUUFqQkF2RixRQUNBQyxPQUFBLE9BQ0FDLE9BQUFpRixHQUVBQSxFQUFBM0QsU0FBQSxxQkFBQSIsImZpbGUiOiJhcHAuY29uZmFyby5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQ3JlYXRlZCBieSBqZXN1cyBvbiAxMC8wNS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgIGFuZ3VsYXJcclxuICAgICAgICAubW9kdWxlKCdhcHAnLFsndWkucm91dGVyJywndG9hc3RTZXJ2aWNlJywnbmdNYXRlcmlhbCddKVxyXG4gICAgICAgIC5jb25maWcoZnVuY3Rpb24oJGh0dHBQcm92aWRlcikge1xyXG4gICAgICAgICAgICAvKiRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ0F1dGhJbnRlcmNlcHRvcicpOyovXHJcbiAgICAgICAgfSlcclxuXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgSk9TRVZBTERFUkxFSSBvbiAyNy8wNi8yMDE1LlxyXG4gKi9cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCd0b2FzdFNlcnZpY2UnLFtdKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCd0b2FzdENvbnRyb2xsZXInLCBmdW5jdGlvbigkbWRUb2FzdCx0b2FzdEFwcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZSA9ICB0b2FzdEFwcC5tZXNzYWdlO1xyXG4gICAgICAgICAgICBzZWxmLmNsb3NlVG9hc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZFRvYXN0LmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5mYWN0b3J5KCAndG9hc3RBcHAnLCB0b2FzdEFwcCApO1xyXG5cclxuICAgIHRvYXN0QXBwLiRpbmplY3QgPSBbICckbWRUb2FzdCcgXTtcclxuXHJcbiAgICBmdW5jdGlvbiB0b2FzdEFwcCAoJG1kVG9hc3QpIHtcclxuICAgICAgICB2YXIgc2VydmljZSA9IHtcclxuICAgICAgICAgICAgbWVzc2FnZTogJycsXHJcbiAgICAgICAgICAgIG5ld21lc3NhZ2U6IG5ld21lc3NhZ2UsXHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZUJvdHRvbTogZXJyb3JNZXNzYWdlQm90dG9tXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gc2VydmljZTtcclxuXHJcbiAgICAgICAgLypmdW5jdGlvbiBlcnJvck1lc3NhZ2UoZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICAkbWRUb2FzdC5zaW1wbGUoKVxyXG4gICAgICAgICAgICAgICAgLnRleHRDb250ZW50KGVycm9yTWVzc2FnZSlcclxuICAgICAgICAgICAgICAgIC5wb3NpdGlvbigndG9wIHJpZ2h0JylcclxuICAgICAgICAgICAgICAgIC5oaWRlRGVsYXkoODAwKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0qL1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBuZXdtZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnL1Byb2pldG9EZUVuZ1NvZnR3L2NsaWVudC92aWV3cy9mb3Jtcy90b2FzdC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiT0tcIixcclxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRBY3Rpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwidG9wIHJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZURlbGF5OiAyMDAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlcnJvck1lc3NhZ2VCb3R0b20oZXJyb3JNZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZSA9IGVycm9yTWVzc2FnZTtcclxuICAgICAgICAgICAgJG1kVG9hc3Quc2hvdyhcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAndG9hc3RDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyQXM6ICd2bScsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICd2aWV3cy9wYWdlcy9kc2N0b2FzdC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiT0tcIixcclxuICAgICAgICAgICAgICAgICAgICBoaWdobGlnaHRBY3Rpb246IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFwiYm90dG9tIGxlZnRcIixcclxuICAgICAgICAgICAgICAgICAgICBoaWRlRGVsYXk6IDEwMDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59KSgpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhyb3V0ZXMpO1xyXG4gICAgZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY2FkYXN0cm9NYXRlcmlhUHJpbWEnLCB7XHJcbiAgICAgICAgICAgIHVybDogJy8nLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbnRyb2xlLWVzdG9xdWUtd2ViL3NyYy9tYWluL3dlYmFwcC9jbGllbnQvdmlld3MvZm9ybXMvY2FkX21hdGVyaWFwcmltYS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhZGFzdHJvTWF0ZXJpYVByaW1hQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG5cclxuICAgIH1cclxuXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDEwLzA1LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcsWyd1aS5yb3V0ZXInLCd0b2FzdFNlcnZpY2UnLCduZ01hdGVyaWFsJ10pXHJcbiAgICAgICAgLmNvbmZpZyhbXCIkaHR0cFByb3ZpZGVyXCIsIGZ1bmN0aW9uKCRodHRwUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgLyokaHR0cFByb3ZpZGVyLmludGVyY2VwdG9ycy5wdXNoKCdBdXRoSW50ZXJjZXB0b3InKTsqL1xyXG4gICAgICAgIH1dKVxyXG5cclxufSkoKTtcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjcvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgndG9hc3RTZXJ2aWNlJyxbXSlcclxuICAgICAgICAuY29udHJvbGxlcigndG9hc3RDb250cm9sbGVyJywgW1wiJG1kVG9hc3RcIiwgXCJ0b2FzdEFwcFwiLCBmdW5jdGlvbigkbWRUb2FzdCx0b2FzdEFwcCkge1xyXG4gICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNlbGYubWVzc2FnZSA9ICB0b2FzdEFwcC5tZXNzYWdlO1xyXG4gICAgICAgICAgICBzZWxmLmNsb3NlVG9hc3QgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICRtZFRvYXN0LmhpZGUoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSlcclxuICAgICAgICAuZmFjdG9yeSggJ3RvYXN0QXBwJywgdG9hc3RBcHAgKTtcclxuXHJcbiAgICB0b2FzdEFwcC4kaW5qZWN0ID0gWyAnJG1kVG9hc3QnIF07XHJcblxyXG4gICAgZnVuY3Rpb24gdG9hc3RBcHAgKCRtZFRvYXN0KSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSB7XHJcbiAgICAgICAgICAgIG1lc3NhZ2U6ICcnLFxyXG4gICAgICAgICAgICBuZXdtZXNzYWdlOiBuZXdtZXNzYWdlLFxyXG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VCb3R0b206IGVycm9yTWVzc2FnZUJvdHRvbVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIC8qZnVuY3Rpb24gZXJyb3JNZXNzYWdlKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAgICAgJG1kVG9hc3Quc2ltcGxlKClcclxuICAgICAgICAgICAgICAgIC50ZXh0Q29udGVudChlcnJvck1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAucG9zaXRpb24oJ3RvcCByaWdodCcpXHJcbiAgICAgICAgICAgICAgICAuaGlkZURlbGF5KDgwMClcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9Ki9cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmV3bWVzc2FnZShlcnJvck1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JNZXNzYWdlO1xyXG4gICAgICAgICAgICAkbWRUb2FzdC5zaG93KFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICd0b2FzdENvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJy9Qcm9qZXRvRGVFbmdTb2Z0dy9jbGllbnQvdmlld3MvZm9ybXMvdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcInRvcCByaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGVEZWxheTogMjAwMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXJyb3JNZXNzYWdlQm90dG9tKGVycm9yTWVzc2FnZSkge1xyXG4gICAgICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XHJcbiAgICAgICAgICAgICRtZFRvYXN0LnNob3coXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3RvYXN0Q29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAndm0nLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3MvcGFnZXMvZHNjdG9hc3QuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcIk9LXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlnaGxpZ2h0QWN0aW9uOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiBcImJvdHRvbSBsZWZ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZURlbGF5OiAxMDAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufSkoKTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IEpPU0VWQUxERVJMRUkgb24gMjUvMDYvMjAxNS5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhyb3V0ZXMpO1xyXG4gICAgZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgICAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnY2FkYXN0cm9NYXRlcmlhUHJpbWEnLCB7XHJcbiAgICAgICAgICAgIHVybDogJy8nLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbnRyb2xlLWVzdG9xdWUtd2ViL3NyYy9tYWluL3dlYmFwcC9jbGllbnQvdmlld3MvZm9ybXMvY2FkX21hdGVyaWFwcmltYS5odG1sJyxcclxuICAgICAgICAgICAgY29udHJvbGxlcjogJ2NhZGFzdHJvTWF0ZXJpYVByaW1hQ29udHJvbGxlciBhcyB2bSdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZSgnLycpO1xyXG5cclxuICAgIH1cclxuICAgIHJvdXRlcy4kaW5qZWN0ID0gW1wiJHN0YXRlUHJvdmlkZXJcIiwgXCIkdXJsUm91dGVyUHJvdmlkZXJcIl07XHJcblxyXG59KSgpO1xyXG5cbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDEwLzA1LzIwMTYuXHJcbiAqL1xyXG5cclxuKGZ1bmN0aW9uKCl7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGFuZ3VsYXIubW9kdWxlKCdhcHAnKVxyXG4gICAgICAgIC5jb250cm9sbGVyKCdjYWRhc3Ryb01hdGVyaWFQcmltYUNvbnRyb2xsZXInLCBjYWRhc3Ryb01hdGVyaWFQcmltYUNvbnRyb2xsZXIpO1xyXG5cclxuICAgIGZ1bmN0aW9uIGNhZGFzdHJvTWF0ZXJpYVByaW1hQ29udHJvbGxlcih0b2FzdEFwcCxtYXRlcmlhUHJpbWFTZXJ2aWNlLCRtZERpYWxvZyl7XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICBzZWxmLmluaXRjYWRhc3Ryb01hdGVyaWFQcmltYSA9IGluaXRjYWRhc3Ryb01hdGVyaWFQcmltYTtcclxuICAgICAgICBzZWxmLmNhZGFzdHJhck1hdGVyaWFQcmltYSA9IGNhZGFzdHJhck1hdGVyaWFQcmltYTtcclxuICAgICAgICBzZWxmLmJ1c2NhVW5pZGFkZXNNYXRlcmlhUHJpbWEgPSBidXNjYVVuaWRhZGVzTWF0ZXJpYVByaW1hO1xyXG4gICAgICAgIHNlbGYuZXhjbHVpck1hdGVyaWFQcmltYSA9IGV4Y2x1aXJNYXRlcmlhUHJpbWE7XHJcbiAgICAgICAgc2VsZi5saXN0YVVuaWRhZGVzO1xyXG4gICAgICAgIHNlbGYuaXNCdG5SZW1vdmVNYXRlcmlhUHJpbWEgPSBmYWxzZTtcclxuICAgICAgICBzZWxmLm1hdGVyaWFwcmltYSA9IHt9O1xyXG4gICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEgPSBbXTtcclxuICAgICAgICBzZWxmLnNlbGVjaW9uYXJNYXRlcmlhUHJpbWEgPSBzZWxlY2lvbmFyTWF0ZXJpYVByaW1hO1xyXG4gICAgICAgIHNlbGYuY2FtcG9PcmRlbmNhbyA9ICdub21lJztcclxuICAgICAgICBzZWxmLnJldmVyc2UgPSB0cnVlO1xyXG4gICAgICAgIHNlbGYub3JkZW5hTWF0ZXJpYVByaW1hID0gb3JkZW5hTWF0ZXJpYVByaW1hO1xyXG5cclxuXHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBidXNjYVVuaWRhZGVzTWF0ZXJpYVByaW1hKCl7XHJcbiAgICAgICAgICAgIHNlbGYubGlzdGFVbmlkYWRlcyA9IFsnS2cnLCdtJ11cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNlbGVjaW9uYXJNYXRlcmlhUHJpbWEgKG1hdGVyaWFQcmltYSl7XHJcbiAgICAgICAgICAgIHNlbGYubWF0ZXJpYXByaW1hID0gbWF0ZXJpYVByaW1hO1xyXG4gICAgICAgICAgICBzZWxmLmlzQnRuUmVtb3ZlTWF0ZXJpYVByaW1hID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpbml0Y2FkYXN0cm9NYXRlcmlhUHJpbWEoKXtcclxuICAgICAgICAgICAgbWF0ZXJpYVByaW1hU2VydmljZS5saXN0YXJUb2RhcygpXHJcbiAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEgPSBkYXRhLmxpc3RhTWF0ZXJpYVByaW1hO1xyXG4gICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICB0b2FzdEFwcC5uZXdtZXNzYWdlKCdQcm9ibGVtYSBhbyBBY2Vzc2FyIGEgbyBzZXJ2aWRvcicpO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAgIC8qICB2YXIgbWF0ZXJpYXByaW1hID0ge2lkOiAxLCBub21lOiBcIlggVGVjaWRvXCIsIHNrdTogXCIwMDAwMFg5OTlcIiwgdW5pZGFkZTogXCJLR1wiLCBvYnNlcnZhY2FvOiBcIlRlc3RlIGRlIFhcIn07XHJcbiAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEucHVzaChtYXRlcmlhcHJpbWEpO1xyXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYXByaW1hID0ge2lkOiAyLCBub21lOiBcIkIgVGVjaWRvXCIsIHNrdTogXCIwMDAwMEIwMDNcIiwgdW5pZGFkZTogXCJLR1wiLCBvYnNlcnZhY2FvOiBcIlRlc3RlIGRlIEJcIn07XHJcbiAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEucHVzaChtYXRlcmlhcHJpbWEpO1xyXG4gICAgICAgICAgICB2YXIgbWF0ZXJpYXByaW1hID0ge2lkOiAzLCBub21lOiBcIkEgVGVjaWRvXCIsIHNrdTogXCIwMDAwMFg5OTlcIiwgdW5pZGFkZTogXCJLR1wiLCBvYnNlcnZhY2FvOiBcIlRlc3RlIGRlIEFcIn07XHJcbiAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEucHVzaChtYXRlcmlhcHJpbWEpO1xyXG4qL1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4Y2x1aXJNYXRlcmlhUHJpbWEoZXYsbWF0ZXJpYVByaW1hKXtcclxuICAgICAgICAgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSgpXHJcbiAgICAgICAgICAgICAgICAucGFyZW50KGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSlcclxuICAgICAgICAgICAgICAgIC50aXRsZSgnRXhjbHVpciBNYXTDqXJpYSBwcmltYSBjb20gU2t1JyArIG1hdGVyaWFQcmltYS5za3UpXHJcbiAgICAgICAgICAgICAgICAuY29udGVudCgnTWF0ZXJpYSBQcmltYTogJyArIG1hdGVyaWFQcmltYS5ub21lKVxyXG4gICAgICAgICAgICAgICAgLmFyaWFMYWJlbCgnRXhjbHVpciBNYXRlcmlhIFByaW1hJylcclxuICAgICAgICAgICAgICAgIC5vaygnU2ltJylcclxuICAgICAgICAgICAgICAgIC5jYW5jZWwoJ07Do28nKVxyXG4gICAgICAgICAgICAgICAgLnRhcmdldEV2ZW50KGV2KTtcclxuICAgICAgICAgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIG1hdGVyaWFQcmltYVNlcnZpY2UuZXhjbHVpcihtYXRlcmlhUHJpbWEpXHJcbiAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgICAgIGlmKGRhdGEuc3VjY2Vzcykge1xyXG4gICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VsZi5saXN0YU1hdGVyaWFQcmltYS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgc2VsZi5saXN0YU1hdGVyaWFQcmltYVtpXS5pZCA9PT0gbWF0ZXJpYVByaW1hLmlkO1xyXG4gICAgICAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIHRvYXN0QXBwLm5ld21lc3NhZ2UoJ1JlbW92aWRvIGNvbSBzdWNlc3NvIS4nKTtcclxuICAgICAgICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgICB0b2FzdEFwcC5uZXdtZXNzYWdlKCdQcm9ibGVtYSBhbyBBY2Vzc2FyIG8gc2Vydmlkb3InKTtcclxuICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzZWxmLmxpc3RhTWF0ZXJpYVByaW1hW2ldLmlkICsgJyA9PT0gJyArICBtYXRlcmlhUHJpbWEuaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5saXN0YU1hdGVyaWFQcmltYVtpXS5pZCA9PT0gbWF0ZXJpYVByaW1hLmlkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5saXN0YU1hdGVyaWFQcmltYS5zcGxpY2UoaSwxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VsZi5pc0J0blJlbW92ZU1hdGVyaWFQcmltYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnUmVtb3ZpZG8gYSBNYXRlcmlhIFByaW1hIGNvbSBvIFNLVS4nICsgbWF0ZXJpYVByaW1hLnNrdSk7XHJcblxyXG4gICAgICAgICAgICAgICAgc2VsZi5tYXRlcmlhcHJpbWEgPSB7aWQ6IG51bGwsbm9tZTogXCJcIiwgc2t1OiBcIlwiLCB1bmlkYWRlOiBcIlwiLCBvYnNlcnZhY2FvOiBcIlwifTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjYWRhc3RyYXJNYXRlcmlhUHJpbWEobWF0ZXJpYVByaW1hKXtcclxuXHJcbiAgICAgICAgICAgICBtYXRlcmlhUHJpbWFTZXJ2aWNlLmNhZGFzdHJhcihtYXRlcmlhUHJpbWEpXHJcbiAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEucHVzaChkYXRhLm1hdGVyaWFsUHJpbWEpO1xyXG4gICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnQ2FkYXN0cm8gcmVhbGl6YWRvIGNvbSBzdWNlc3NvIScpO1xyXG4gICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICB0b2FzdEFwcC5uZXdtZXNzYWdlKCdQcm9ibGVtYSBhbyBBY2Vzc2FyIGEgbyBzZXJ2aWRvcicpO1xyXG4gICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgLyogIHZhciBtYXRlcmlhcHJpbWEgPSB7aWQ6IHNlbGYubGlzdGFNYXRlcmlhUHJpbWEubGVuZ3RoKzEsIG5vbWU6IG1hdGVyaWFQcmltYS5ub21lLCBza3U6IG1hdGVyaWFQcmltYS5za3UsIHVuaWRhZGU6IG1hdGVyaWFQcmltYS51bmlkYWRlLCBvYnNlcnZhY2FvOiBtYXRlcmlhUHJpbWEub2JzZXJ2YWNhb307XHJcbiAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEucHVzaChtYXRlcmlhcHJpbWEpO1xyXG4gICAgICAgICAgICBzZWxmLm1hdGVyaWFwcmltYSA9IHtpZDogbnVsbCxub21lOiBcIlwiLCBza3U6IFwiXCIsIHVuaWRhZGU6IFwiXCIsIG9ic2VydmFjYW86IFwiXCJ9O1xyXG4gICAgICAgICAgICB0b2FzdEFwcC5uZXdtZXNzYWdlKCdDYWRhc3RybyByZWFsaXphZG8gY29tIHN1Y2Vzc28gcGFyYSBvIFNLVS4nICsgbWF0ZXJpYVByaW1hLnNrdSk7XHJcbiovXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvcmRlbmFNYXRlcmlhUHJpbWEoY2FtcG9PcmRlbmNhbyl7XHJcbiAgICAgICAgICAgIHNlbGYucmV2ZXJzZSA9IChzZWxmLmNhbXBvT3JkZW5jYW8gPT09IGNhbXBvT3JkZW5jYW8pID8gIXNlbGYucmV2ZXJzZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWxmLmNhbXBvT3JkZW5jYW8gPSBjYW1wb09yZGVuY2FvO1xyXG5cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuICAgIGNhZGFzdHJvTWF0ZXJpYVByaW1hQ29udHJvbGxlci4kaW5qZWN0ID0gW1widG9hc3RBcHBcIiwgXCJtYXRlcmlhUHJpbWFTZXJ2aWNlXCIsIFwiJG1kRGlhbG9nXCJdO1xyXG5cclxufSkoKTtcbi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDExLzA1LzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmFjdG9yeSgnbWF0ZXJpYVByaW1hU2VydmljZScsIG1hdGVyaWFQcmltYVNlcnZpY2UpO1xyXG5cclxuICAgIG1hdGVyaWFQcmltYVNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYXRlcmlhUHJpbWFTZXJ2aWNlKCRodHRwKSB7XHJcblxyXG4gICAgICAgIHZhciBBUElfUk9VVEVfQ0FEQVNUUkFSTUFURVJJQUxQUklNQSA9ICdhcGkvbWF0ZXJpYWwvY2FkYXN0cmFyLyc7XHJcbiAgICAgICAgdmFyIEFQSV9ST1VURV9FWENMVUlSTUFURVJJQVBSSU1BID0gJ2FwaS9tYXRlcmlhbC9leGNsdWlyLyc7XHJcbiAgICAgICAgdmFyIEFQSV9ST1VURV9MSVNUQVJNQVRFUklBUFJJTUEgPSAnL2FwaS9tYXRlcmlhbC9saXN0YXIvJztcclxuXHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBjYWRhc3RyYXI6IGNhZGFzdHJhcixcclxuICAgICAgICAgICAgZXhjbHVpcjogZXhjbHVpcixcclxuICAgICAgICAgICAgbGlzdGFyVG9kYXM6IGxpc3RhclRvZGFzXHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNhZGFzdHJhcihkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9DQURBU1RSQVJNQVRFUklBTFBSSU1BLCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4Y2x1aXIoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfRVhDTFVJUk1BVEVSSUFQUklNQSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaXN0YXJUb2RhcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfTElTVEFSTUFURVJJQVBSSU1BKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpO1xuLyoqXHJcbiAqIENyZWF0ZWQgYnkgamVzdXMgb24gMDYvMDUvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29uZmlnKGFwcENvbmZpZyk7XHJcblxyXG4gICAgYXBwQ29uZmlnLiRpbmplY3QgPSBbJyRtZFRoZW1pbmdQcm92aWRlcicsJyRsb2NhdGlvblByb3ZpZGVyJ107XHJcblxyXG4gICAgZnVuY3Rpb24gYXBwQ29uZmlnKCRtZFRoZW1pbmdQcm92aWRlcikge1xyXG4gICAgICAgICRtZFRoZW1pbmdQcm92aWRlci50aGVtZSgnZGVmYXVsdCcpXHJcbiAgICAgICAgICAgIC5wcmltYXJ5UGFsZXR0ZSgncHVycGxlJywge1xyXG4gICAgICAgICAgICAgICAgJ2RlZmF1bHQnOiAnNDAwJywgLy8gYnkgZGVmYXVsdCB1c2Ugc2hhZGUgNDAwIGZyb20gdGhlIHBpbmsgcGFsZXR0ZSBmb3IgcHJpbWFyeSBpbnRlbnRpb25zXHJcbiAgICAgICAgICAgICAgICAnaHVlLTEnOiAnMTAwJywgLy8gdXNlIHNoYWRlIDEwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0xPC9jb2RlPiBjbGFzc1xyXG4gICAgICAgICAgICAgICAgJ2h1ZS0yJzogJzYwMCcsIC8vIHVzZSBzaGFkZSA2MDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMjwvY29kZT4gY2xhc3NcclxuICAgICAgICAgICAgICAgICdodWUtMyc6ICdBMTAwJyAvLyB1c2Ugc2hhZGUgQTEwMCBmb3IgdGhlIDxjb2RlPm1kLWh1ZS0zPC9jb2RlPiBjbGFzc1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAvLyBJZiB5b3Ugc3BlY2lmeSBsZXNzIHRoYW4gYWxsIG9mIHRoZSBrZXlzLCBpdCB3aWxsIGluaGVyaXQgZnJvbSB0aGVcclxuICAgICAgICAgICAgLy8gZGVmYXVsdCBzaGFkZXNcclxuICAgICAgICAgICAgLmFjY2VudFBhbGV0dGUoJ3B1cnBsZScsIHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJzIwMCcgLy8gdXNlIHNoYWRlIDIwMCBmb3IgZGVmYXVsdCwgYW5kIGtlZXAgYWxsIG90aGVyIHNoYWRlcyB0aGUgc2FtZVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG5cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBqZXN1cyBvbiAxMC8wNS8yMDE2LlxyXG4gKi9cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuY29udHJvbGxlcignY2FkYXN0cm9NYXRlcmlhUHJpbWFDb250cm9sbGVyJywgY2FkYXN0cm9NYXRlcmlhUHJpbWFDb250cm9sbGVyKTtcclxuXHJcbiAgICBmdW5jdGlvbiBjYWRhc3Ryb01hdGVyaWFQcmltYUNvbnRyb2xsZXIodG9hc3RBcHAsbWF0ZXJpYVByaW1hU2VydmljZSwkbWREaWFsb2cpe1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5pbml0Y2FkYXN0cm9NYXRlcmlhUHJpbWEgPSBpbml0Y2FkYXN0cm9NYXRlcmlhUHJpbWE7XHJcbiAgICAgICAgc2VsZi5jYWRhc3RyYXJNYXRlcmlhUHJpbWEgPSBjYWRhc3RyYXJNYXRlcmlhUHJpbWE7XHJcbiAgICAgICAgc2VsZi5idXNjYVVuaWRhZGVzTWF0ZXJpYVByaW1hID0gYnVzY2FVbmlkYWRlc01hdGVyaWFQcmltYTtcclxuICAgICAgICBzZWxmLmV4Y2x1aXJNYXRlcmlhUHJpbWEgPSBleGNsdWlyTWF0ZXJpYVByaW1hO1xyXG4gICAgICAgIHNlbGYubGlzdGFVbmlkYWRlcztcclxuICAgICAgICBzZWxmLmlzQnRuUmVtb3ZlTWF0ZXJpYVByaW1hID0gZmFsc2U7XHJcbiAgICAgICAgc2VsZi5tYXRlcmlhcHJpbWEgPSB7fTtcclxuICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hID0gW107XHJcbiAgICAgICAgc2VsZi5zZWxlY2lvbmFyTWF0ZXJpYVByaW1hID0gc2VsZWNpb25hck1hdGVyaWFQcmltYTtcclxuICAgICAgICBzZWxmLmNhbXBvT3JkZW5jYW8gPSAnbm9tZSc7XHJcbiAgICAgICAgc2VsZi5yZXZlcnNlID0gdHJ1ZTtcclxuICAgICAgICBzZWxmLm9yZGVuYU1hdGVyaWFQcmltYSA9IG9yZGVuYU1hdGVyaWFQcmltYTtcclxuXHJcblxyXG5cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYnVzY2FVbmlkYWRlc01hdGVyaWFQcmltYSgpe1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RhVW5pZGFkZXMgPSBbJ0tnJywnbSddXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzZWxlY2lvbmFyTWF0ZXJpYVByaW1hIChtYXRlcmlhUHJpbWEpe1xyXG4gICAgICAgICAgICBzZWxmLm1hdGVyaWFwcmltYSA9IG1hdGVyaWFQcmltYTtcclxuICAgICAgICAgICAgc2VsZi5pc0J0blJlbW92ZU1hdGVyaWFQcmltYSA9IHRydWU7XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaW5pdGNhZGFzdHJvTWF0ZXJpYVByaW1hKCl7XHJcbiAgICAgICAgICAgIG1hdGVyaWFQcmltYVNlcnZpY2UubGlzdGFyVG9kYXMoKVxyXG4gICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hID0gZGF0YS5saXN0YU1hdGVyaWFQcmltYTtcclxuICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnUHJvYmxlbWEgYW8gQWNlc3NhciBhIG8gc2Vydmlkb3InKTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAvKiAgdmFyIG1hdGVyaWFwcmltYSA9IHtpZDogMSwgbm9tZTogXCJYIFRlY2lkb1wiLCBza3U6IFwiMDAwMDBYOTk5XCIsIHVuaWRhZGU6IFwiS0dcIiwgb2JzZXJ2YWNhbzogXCJUZXN0ZSBkZSBYXCJ9O1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnB1c2gobWF0ZXJpYXByaW1hKTtcclxuICAgICAgICAgICAgdmFyIG1hdGVyaWFwcmltYSA9IHtpZDogMiwgbm9tZTogXCJCIFRlY2lkb1wiLCBza3U6IFwiMDAwMDBCMDAzXCIsIHVuaWRhZGU6IFwiS0dcIiwgb2JzZXJ2YWNhbzogXCJUZXN0ZSBkZSBCXCJ9O1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnB1c2gobWF0ZXJpYXByaW1hKTtcclxuICAgICAgICAgICAgdmFyIG1hdGVyaWFwcmltYSA9IHtpZDogMywgbm9tZTogXCJBIFRlY2lkb1wiLCBza3U6IFwiMDAwMDBYOTk5XCIsIHVuaWRhZGU6IFwiS0dcIiwgb2JzZXJ2YWNhbzogXCJUZXN0ZSBkZSBBXCJ9O1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnB1c2gobWF0ZXJpYXByaW1hKTtcclxuKi9cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBmdW5jdGlvbiBleGNsdWlyTWF0ZXJpYVByaW1hKGV2LG1hdGVyaWFQcmltYSl7XHJcbiAgICAgICAgICAgIHZhciBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oKVxyXG4gICAgICAgICAgICAgICAgLnBhcmVudChhbmd1bGFyLmVsZW1lbnQoZG9jdW1lbnQuYm9keSkpXHJcbiAgICAgICAgICAgICAgICAudGl0bGUoJ0V4Y2x1aXIgTWF0w6lyaWEgcHJpbWEgY29tIFNrdScgKyBtYXRlcmlhUHJpbWEuc2t1KVxyXG4gICAgICAgICAgICAgICAgLmNvbnRlbnQoJ01hdGVyaWEgUHJpbWE6ICcgKyBtYXRlcmlhUHJpbWEubm9tZSlcclxuICAgICAgICAgICAgICAgIC5hcmlhTGFiZWwoJ0V4Y2x1aXIgTWF0ZXJpYSBQcmltYScpXHJcbiAgICAgICAgICAgICAgICAub2soJ1NpbScpXHJcbiAgICAgICAgICAgICAgICAuY2FuY2VsKCdOw6NvJylcclxuICAgICAgICAgICAgICAgIC50YXJnZXRFdmVudChldik7XHJcbiAgICAgICAgICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBtYXRlcmlhUHJpbWFTZXJ2aWNlLmV4Y2x1aXIobWF0ZXJpYVByaW1hKVxyXG4gICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICBpZihkYXRhLnN1Y2Nlc3MpIHtcclxuICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlbGYubGlzdGFNYXRlcmlhUHJpbWEubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWFbaV0uaWQgPT09IG1hdGVyaWFQcmltYS5pZDtcclxuICAgICAgICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnNwbGljZShpLDEpO1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICB0b2FzdEFwcC5uZXdtZXNzYWdlKCdSZW1vdmlkbyBjb20gc3VjZXNzbyEuJyk7XHJcbiAgICAgICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnUHJvYmxlbWEgYW8gQWNlc3NhciBvIHNlcnZpZG9yJyk7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VsZi5saXN0YU1hdGVyaWFQcmltYS5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2VsZi5saXN0YU1hdGVyaWFQcmltYVtpXS5pZCArICcgPT09ICcgKyAgbWF0ZXJpYVByaW1hLmlkKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYubGlzdGFNYXRlcmlhUHJpbWFbaV0uaWQgPT09IG1hdGVyaWFQcmltYS5pZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubGlzdGFNYXRlcmlhUHJpbWEuc3BsaWNlKGksMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNlbGYuaXNCdG5SZW1vdmVNYXRlcmlhUHJpbWEgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRvYXN0QXBwLm5ld21lc3NhZ2UoJ1JlbW92aWRvIGEgTWF0ZXJpYSBQcmltYSBjb20gbyBTS1UuJyArIG1hdGVyaWFQcmltYS5za3UpO1xyXG5cclxuICAgICAgICAgICAgICAgIHNlbGYubWF0ZXJpYXByaW1hID0ge2lkOiBudWxsLG5vbWU6IFwiXCIsIHNrdTogXCJcIiwgdW5pZGFkZTogXCJcIiwgb2JzZXJ2YWNhbzogXCJcIn07XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2FkYXN0cmFyTWF0ZXJpYVByaW1hKG1hdGVyaWFQcmltYSl7XHJcblxyXG4gICAgICAgICAgICAgbWF0ZXJpYVByaW1hU2VydmljZS5jYWRhc3RyYXIobWF0ZXJpYVByaW1hKVxyXG4gICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAgaWYoZGF0YS5zdWNjZXNzKSB7XHJcbiAgICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnB1c2goZGF0YS5tYXRlcmlhbFByaW1hKTtcclxuICAgICAgICAgICAgIHRvYXN0QXBwLm5ld21lc3NhZ2UoJ0NhZGFzdHJvIHJlYWxpemFkbyBjb20gc3VjZXNzbyEnKTtcclxuICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnUHJvYmxlbWEgYW8gQWNlc3NhciBhIG8gc2Vydmlkb3InKTtcclxuICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgIC8qICB2YXIgbWF0ZXJpYXByaW1hID0ge2lkOiBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLmxlbmd0aCsxLCBub21lOiBtYXRlcmlhUHJpbWEubm9tZSwgc2t1OiBtYXRlcmlhUHJpbWEuc2t1LCB1bmlkYWRlOiBtYXRlcmlhUHJpbWEudW5pZGFkZSwgb2JzZXJ2YWNhbzogbWF0ZXJpYVByaW1hLm9ic2VydmFjYW99O1xyXG4gICAgICAgICAgICBzZWxmLmxpc3RhTWF0ZXJpYVByaW1hLnB1c2gobWF0ZXJpYXByaW1hKTtcclxuICAgICAgICAgICAgc2VsZi5tYXRlcmlhcHJpbWEgPSB7aWQ6IG51bGwsbm9tZTogXCJcIiwgc2t1OiBcIlwiLCB1bmlkYWRlOiBcIlwiLCBvYnNlcnZhY2FvOiBcIlwifTtcclxuICAgICAgICAgICAgdG9hc3RBcHAubmV3bWVzc2FnZSgnQ2FkYXN0cm8gcmVhbGl6YWRvIGNvbSBzdWNlc3NvIHBhcmEgbyBTS1UuJyArIG1hdGVyaWFQcmltYS5za3UpO1xyXG4qL1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb3JkZW5hTWF0ZXJpYVByaW1hKGNhbXBvT3JkZW5jYW8pe1xyXG4gICAgICAgICAgICBzZWxmLnJldmVyc2UgPSAoc2VsZi5jYW1wb09yZGVuY2FvID09PSBjYW1wb09yZGVuY2FvKSA/ICFzZWxmLnJldmVyc2UgOiBmYWxzZTtcclxuICAgICAgICAgICAgc2VsZi5jYW1wb09yZGVuY2FvID0gY2FtcG9PcmRlbmNhbztcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDExLzA1LzIwMTYuXHJcbiAqL1xyXG5cclxuXHJcbihmdW5jdGlvbigpe1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICBhbmd1bGFyXHJcbiAgICAgICAgLm1vZHVsZSgnYXBwJylcclxuICAgICAgICAuZmFjdG9yeSgnbWF0ZXJpYVByaW1hU2VydmljZScsIG1hdGVyaWFQcmltYVNlcnZpY2UpO1xyXG5cclxuICAgIG1hdGVyaWFQcmltYVNlcnZpY2UuJGluamVjdCA9IFsnJGh0dHAnLCckbG9jYXRpb24nXTtcclxuXHJcbiAgICBmdW5jdGlvbiBtYXRlcmlhUHJpbWFTZXJ2aWNlKCRodHRwKSB7XHJcblxyXG4gICAgICAgIHZhciBBUElfUk9VVEVfQ0FEQVNUUkFSTUFURVJJQUxQUklNQSA9ICdhcGkvbWF0ZXJpYWwvY2FkYXN0cmFyLyc7XHJcbiAgICAgICAgdmFyIEFQSV9ST1VURV9FWENMVUlSTUFURVJJQVBSSU1BID0gJ2FwaS9tYXRlcmlhbC9leGNsdWlyLyc7XHJcbiAgICAgICAgdmFyIEFQSV9ST1VURV9MSVNUQVJNQVRFUklBUFJJTUEgPSAnL2FwaS9tYXRlcmlhbC9saXN0YXIvJztcclxuXHJcblxyXG4gICAgICAgIHZhciBzZXJ2aWNlID0ge1xyXG4gICAgICAgICAgICBjYWRhc3RyYXI6IGNhZGFzdHJhcixcclxuICAgICAgICAgICAgZXhjbHVpcjogZXhjbHVpcixcclxuICAgICAgICAgICAgbGlzdGFyVG9kYXM6IGxpc3RhclRvZGFzXHJcblxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHNlcnZpY2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNhZGFzdHJhcihkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAkaHR0cC5wb3N0KEFQSV9ST1VURV9DQURBU1RSQVJNQVRFUklBTFBSSU1BLCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4Y2x1aXIoZGF0YSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJGh0dHAucG9zdChBUElfUk9VVEVfRVhDTFVJUk1BVEVSSUFQUklNQSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsaXN0YXJUb2RhcygpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRodHRwLmdldChBUElfUk9VVEVfTElTVEFSTUFURVJJQVBSSU1BKTtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcblxyXG59KSgpOyIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGplc3VzIG9uIDA2LzA1LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24oKXtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgYW5ndWxhclxyXG4gICAgICAgIC5tb2R1bGUoJ2FwcCcpXHJcbiAgICAgICAgLmNvbmZpZyhhcHBDb25maWcpO1xyXG5cclxuICAgIGFwcENvbmZpZy4kaW5qZWN0ID0gWyckbWRUaGVtaW5nUHJvdmlkZXInLCckbG9jYXRpb25Qcm92aWRlciddO1xyXG5cclxuICAgIGZ1bmN0aW9uIGFwcENvbmZpZygkbWRUaGVtaW5nUHJvdmlkZXIpIHtcclxuICAgICAgICAkbWRUaGVtaW5nUHJvdmlkZXIudGhlbWUoJ2RlZmF1bHQnKVxyXG4gICAgICAgICAgICAucHJpbWFyeVBhbGV0dGUoJ3B1cnBsZScsIHtcclxuICAgICAgICAgICAgICAgICdkZWZhdWx0JzogJzQwMCcsIC8vIGJ5IGRlZmF1bHQgdXNlIHNoYWRlIDQwMCBmcm9tIHRoZSBwaW5rIHBhbGV0dGUgZm9yIHByaW1hcnkgaW50ZW50aW9uc1xyXG4gICAgICAgICAgICAgICAgJ2h1ZS0xJzogJzEwMCcsIC8vIHVzZSBzaGFkZSAxMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMTwvY29kZT4gY2xhc3NcclxuICAgICAgICAgICAgICAgICdodWUtMic6ICc2MDAnLCAvLyB1c2Ugc2hhZGUgNjAwIGZvciB0aGUgPGNvZGU+bWQtaHVlLTI8L2NvZGU+IGNsYXNzXHJcbiAgICAgICAgICAgICAgICAnaHVlLTMnOiAnQTEwMCcgLy8gdXNlIHNoYWRlIEExMDAgZm9yIHRoZSA8Y29kZT5tZC1odWUtMzwvY29kZT4gY2xhc3NcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8gSWYgeW91IHNwZWNpZnkgbGVzcyB0aGFuIGFsbCBvZiB0aGUga2V5cywgaXQgd2lsbCBpbmhlcml0IGZyb20gdGhlXHJcbiAgICAgICAgICAgIC8vIGRlZmF1bHQgc2hhZGVzXHJcbiAgICAgICAgICAgIC5hY2NlbnRQYWxldHRlKCdwdXJwbGUnLCB7XHJcbiAgICAgICAgICAgICAgICAnZGVmYXVsdCc6ICcyMDAnIC8vIHVzZSBzaGFkZSAyMDAgZm9yIGRlZmF1bHQsIGFuZCBrZWVwIGFsbCBvdGhlciBzaGFkZXMgdGhlIHNhbWVcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0pKCk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
