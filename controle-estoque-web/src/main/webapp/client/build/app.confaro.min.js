!function(){"use strict";angular.module("app",["ui.router","toastService","ngMaterial"]).config(["$httpProvider",function(a){}])}(),function(){"use strict";function a(a){function e(e){this.message=e,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"controle-estoque-web/client/views/forms/toast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}function t(e){this.message=e,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"bottom left",hideDelay:1e3})}var r={message:"",newmessage:e,errorMessageBottom:t};return r}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(a,e){var t=this;t.message=e.message,t.closeToast=function(){a.hide()}}]).factory("toastApp",a),a.$inject=["$mdToast"]}(),function(){"use strict";function a(a,e){a.state("cadastroMateriaPrima",{url:"/",templateUrl:"controle-estoque-web/client/views/forms/cad_materiaprima.html",controller:"cadastroMateriaPrimaController as vm"}),e.otherwise("/")}angular.module("app").config(a),a.$inject=["$stateProvider","$urlRouterProvider"]}(),function(){"use strict";function a(a,e,t){function r(){l.listaUnidades=["Kg","m"]}function i(a){l.materiaprima=a,l.isBtnRemoveMateriaPrima=!0}function o(){e.listarTodas().success(function(a){console.log(a),l.listaMateriaPrima=a})}function s(r,i){var o=t.confirm().parent(angular.element(document.body)).title("Excluir Matéria prima com Sku"+i.sku).content("Materia Prima: "+i.nome).ariaLabel("Excluir Materia Prima").ok("Sim").cancel("Não").targetEvent(r);t.show(o).then(function(){e.excluir(i).success(function(e){if(e.success){for(var t=0;t<l.listaMateriaPrima.length;t++)l.listaMateriaPrima[t].id===i.id,l.listaMateriaPrima.splice(t,1);a.newmessage("Removido com sucesso!.")}else a.newmessage("Problema ao Acessar o servidor")});for(var t=0;t<l.listaMateriaPrima.length;t++)if(console.log(l.listaMateriaPrima[t].id+" === "+i.id),l.listaMateriaPrima[t].id===i.id){l.listaMateriaPrima.splice(t,1);break}l.isBtnRemoveMateriaPrima=!1,a.newmessage("Removido a Materia Prima com o SKU."+i.sku),l.materiaprima={id:null,name:"",skuCode:"",measuringUnit:"",description:""}})}function n(t){e.cadastrar(t).success(function(e){e.success?(l.listaMateriaPrima.push(e.materialPrima),a.newmessage("Cadastro realizado com sucesso!")):a.newmessage("Problema ao Acessar a o servidor")})}function c(a){l.reverse=l.campoOrdencao===a?!l.reverse:!1,l.campoOrdencao=a}var l=this;l.initcadastroMateriaPrima=o,l.cadastrarMateriaPrima=n,l.buscaUnidadesMateriaPrima=r,l.excluirMateriaPrima=s,l.listaUnidades,l.isBtnRemoveMateriaPrima=!1,l.materiaprima={},l.listaMateriaPrima=[],l.selecionarMateriaPrima=i,l.campoOrdencao="nome",l.reverse=!0,l.ordenaMateriaPrima=c}angular.module("app").controller("cadastroMateriaPrimaController",a),a.$inject=["toastApp","materiaPrimaService","$mdDialog"]}(),function(){"use strict";function a(a){function e(e){return a.post(i,e)}function t(e){return a.post(o,e)}function r(){return a.post(s)}var i="/controle-estoque-web/api/materialcategory/cadastrar/",o="/controle-estoque-web/api/materialcategory/excluir/",s="/controle-estoque-web/api/materialcategory/listar/",n={cadastrar:e,excluir:t,listarTodas:r};return n}angular.module("app").factory("materialCategoryService",a),a.$inject=["$http","$location"]}(),function(){"use strict";function a(a){function e(e){return a.post(i,e)}function t(e){return a.post(o,e)}function r(){return a.post(s)}var i="/controle-estoque-web/api/material/cadastrar/",o="/controle-estoque-web/api/material/excluir/",s="/controle-estoque-web/api/material/listar/",n={cadastrar:e,excluir:t,listarTodas:r};return n}angular.module("app").factory("materiaPrimaService",a),a.$inject=["$http","$location"]}(),function(){"use strict";function a(a){a.theme("default").primaryPalette("purple",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("purple",{"default":"200"})}angular.module("app").config(a),a.$inject=["$mdThemingProvider","$locationProvider"]}();
//# sourceMappingURL=data:application/json;base64,
