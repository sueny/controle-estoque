!function(){"use strict";angular.module("app",["ui.router","toastService","ngMaterial"]).config(["$httpProvider",function(a){}])}(),function(){"use strict";function a(a){function t(t){this.message=t,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"controle-estoque-web/client/views/forms/toast.html",action:"OK",highlightAction:!0,position:"top right",hideDelay:2e3})}function e(t){this.message=t,a.show({controller:"toastController",controllerAs:"vm",templateUrl:"views/pages/dsctoast.html",action:"OK",highlightAction:!0,position:"bottom left",hideDelay:1e3})}var r={message:"",newmessage:t,errorMessageBottom:e};return r}angular.module("toastService",[]).controller("toastController",["$mdToast","toastApp",function(a,t){var e=this;e.message=t.message,e.closeToast=function(){a.hide()}}]).factory("toastApp",a),a.$inject=["$mdToast"]}(),function(){"use strict";function a(a,t,e){a.state("cadastroMateriaPrima",{url:"/",templateUrl:e.staticPath+"views/forms/cad_materiaprima.html",controller:"cadastroMateriaPrimaController as vm"}),t.otherwise("/")}angular.module("app").config(a),a.$inject=["$stateProvider","$urlRouterProvider","paths"]}(),function(){"use strict";function a(a,t,e){function r(){l.listaUnidades=["Kg","m"]}function i(a){l.materiaprima=a,l.isBtnRemoveMateriaPrima=!0}function o(){t.listarTodas().success(function(a){console.log(a),l.listaMateriaPrima=a})}function s(r,i){var o=e.confirm().parent(angular.element(document.body)).title("Excluir Matéria prima com Sku"+i.skuCode).content("Materia Prima: "+i.name).ariaLabel("Excluir Materia Prima").ok("Sim").cancel("Não").targetEvent(r);e.show(o).then(function(){t.excluir(i).success(function(t){if(t){for(var e=0;e<l.listaMateriaPrima.length;e++)l.listaMateriaPrima[e].id===i.id,l.listaMateriaPrima.splice(e,1);a.newmessage("Removido com sucesso!.")}else a.newmessage("Problema ao Acessar o servidor")});for(var e=0;e<l.listaMateriaPrima.length;e++)if(console.log(l.listaMateriaPrima[e].id+" === "+i.id),l.listaMateriaPrima[e].id===i.id){l.listaMateriaPrima.splice(e,1);break}l.isBtnRemoveMateriaPrima=!1,a.newmessage("Removido a Materia Prima com o SKU."+i.sku),l.materiaprima={id:null,name:"",skuCode:"",measuringUnit:"",description:""}})}function n(e){t.cadastrar(e).success(function(t){console.log(t),t?(l.listaMateriaPrima.push(e),a.newmessage("Cadastro realizado com sucesso!")):a.newmessage("Problema ao Acessar a o servidor")})}function c(a){l.reverse=l.campoOrdencao===a?!l.reverse:!1,l.campoOrdencao=a}var l=this;l.initcadastroMateriaPrima=o,l.cadastrarMateriaPrima=n,l.buscaUnidadesMateriaPrima=r,l.excluirMateriaPrima=s,l.listaUnidades,l.isBtnRemoveMateriaPrima=!1,l.materiaprima={},l.listaMateriaPrima=[],l.selecionarMateriaPrima=i,l.campoOrdencao="nome",l.reverse=!0,l.ordenaMateriaPrima=c,l.materialCategories=[]}angular.module("app").controller("cadastroMateriaPrimaController",a),a.$inject=["toastApp","materiaPrimaService","$mdDialog"]}(),function(){"use strict";function a(a,t){function e(t){return a.post(o,t)}function r(t){return a.post(s,t)}function i(){return a.post(n)}var o=t.apiUrl+"materialcategory/cadastrar/",s=t.apiUrl+"materialcategory/remover/",n=t.apiUrl+"materialcategory/listar/",c={cadastrar:e,excluir:r,listarTodas:i};return c}angular.module("app").factory("materialCategoryService",a),a.$inject=["$http","paths","$location"]}(),function(){"use strict";function a(a,t){function e(t){return a.post(o,t)}function r(t){return a.post(s,t)}function i(){return a.post(n)}var o=t.apiUrl+"material/cadastrar/",s=t.apiUrl+"material/remover/",n=t.apiUrl+"material/listar/",c={cadastrar:e,excluir:r,listarTodas:i};return c}angular.module("app").factory("materiaPrimaService",a),a.$inject=["$http","paths","$location"]}(),function(){"use strict";function a(a){a.theme("default").primaryPalette("purple",{"default":"400","hue-1":"100","hue-2":"600","hue-3":"A100"}).accentPalette("purple",{"default":"200"})}var t="",e="http://localhost:8080/controle-estoque-web/api/";angular.module("app").constant("paths",{staticPath:t,apiUrl:e}).config(a),a.$inject=["$mdThemingProvider","$locationProvider"]}();
//# sourceMappingURL=data:application/json;base64,
