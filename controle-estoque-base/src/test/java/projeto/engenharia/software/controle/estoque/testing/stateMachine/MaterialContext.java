package projeto.engenharia.software.controle.estoque.testing.stateMachine;

import projeto.engenharia.software.controle.estoque.testing.adapter.ICadastroMaterial;
import projeto.engenharia.software.controle.estoque.testing.adapter.impl.CadastroMaterialWeb;

public class MaterialContext extends java.lang.Object implements java.lang.Cloneable {

    public State state;
    public Integer skuMaterial;
    public Integer unitMaterial;
    public Boolean registerStatus;
    
    private ICadastroMaterial adapter;

    public MaterialContext() {
        state = State.Idle;
        registerStatus = false;
        skuMaterial = 0;
        unitMaterial = 0;
        adapter = new CadastroMaterialWeb();

    }

    public MaterialContext clone() {
        MaterialContext cl = new MaterialContext();

        cl.state = this.state;
        cl.skuMaterial = this.skuMaterial;
        cl.unitMaterial = this.unitMaterial;
        cl.registerStatus = this.registerStatus;
        cl.adapter = this.adapter;

        return cl;
    }

    public void handleEvent(Object... in_colObject) {
        if (in_colObject.length > 0) {

            String sEventName = (String) in_colObject[0];
            if ((state == State.Idle) && (sEventName.compareTo("registerEvent") == 0)) {
                //values generated by parteg
                //skuMaterial = ((Integer)in_colObject[1]).intValue();
                //unitMaterial = ((Integer)in_colObject[1]).intValue();

                state = State.Registering;

            } else if ((state == State.Registering) && (sEventName.compareTo("validEvent") == 0)) {
                skuMaterial = ((Integer) in_colObject[1]).intValue();
                unitMaterial = ((Integer) in_colObject[2]).intValue();

                registerStatus = registerIsValid(skuMaterial, unitMaterial);

                if (registerStatus == false) {
                    state = State.Registering;
                } else {
                    saveData(skuMaterial, unitMaterial);
                    state = State.Registered;
                }

            } else if ((state == State.Registered) && (sEventName.compareTo("newRegisterEvent") == 0)) {

                state = State.Registering;

            } else if ((state == State.Registered) && (sEventName.compareTo("finaliseEvent") == 0)) {
                closeSection();

            }

        }
    }

    protected Boolean registerIsValid(Integer sku, Integer unit) {
        if (sku >= 1 && unit >= 1) {
            return true;
        } else {
            return false;
        }
    }

    protected void closeSection() {
        adapter.closeSession();
    }

    protected void saveData(Integer sku, Integer unit) {
        adapter.appSaveData(sku, unit);
    }
}
